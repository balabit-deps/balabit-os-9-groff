From 912a8bf478e81282b8d965e577ef516e5b758151 Mon Sep 17 00:00:00 2001
From: "G. Branden Robinson" <g.branden.robinson@gmail.com>
Date: Tue, 29 Sep 2020 07:02:25 +1000
Subject: Fix SEGV arising from recursing destructor.

* src/roff/troff/node.h (output_file): Add class member `is_dying` to
  track whether destructor has already been entered; initialize false.

* src/roff/troff/node.cpp (real_output_file::~real_output_file): Set
  `is_dying` true when destructor entered.

* src/roff/troff/div.cpp (cleanup_and_exit): Only delete
  `the_output` object if it is not already being destroyed.

Thanks to "hackerb9" for reporting the problem.  Problem appears to date
back to groff 1.02 (June 1991) or earlier.

Fixes <https://savannah.gnu.org/bugs/index.php?59202>.

Origin: backport, https://git.savannah.gnu.org/cgit/groff.git/commit/?id=c788cf8c6bbe939fa11f7ec032e525a7e33f41b6
Bug: https://savannah.gnu.org/bugs/index.php?59202
Bug-Ubuntu: https://bugs.launchpad.net/bugs/1942974
Last-Update: 2021-09-09

Patch-Name: destructor-segv.patch
---
 src/roff/troff/div.cpp  | 5 ++++-
 src/roff/troff/node.cpp | 2 ++
 src/roff/troff/node.h   | 1 +
 3 files changed, 7 insertions(+), 1 deletion(-)

diff --git a/src/roff/troff/div.cpp b/src/roff/troff/div.cpp
index 66382a85..91b01c9e 100644
--- a/src/roff/troff/div.cpp
+++ b/src/roff/troff/div.cpp
@@ -559,7 +559,10 @@ void cleanup_and_exit(int exit_code)
 {
   if (the_output) {
     the_output->trailer(topdiv->get_page_length());
-    delete the_output;
+    // If we're already dying, don't call the_output's destructor.  See
+    // node.cpp:real_output_file::~real_output_file().
+    if (!the_output->is_dying)
+      delete the_output;
   }
   FLUSH_INPUT_PIPE(STDIN_FILENO);
   exit(exit_code);
diff --git a/src/roff/troff/node.cpp b/src/roff/troff/node.cpp
index 27311b1c..464a0ab7 100644
--- a/src/roff/troff/node.cpp
+++ b/src/roff/troff/node.cpp
@@ -1656,6 +1656,8 @@ real_output_file::~real_output_file()
 {
   if (!fp)
     return;
+  // Prevent destructor from recursing; see div.cpp:cleanup_and_exit().
+  is_dying = true;
   // To avoid looping, set fp to 0 before calling fatal().
   if (ferror(fp) || fflush(fp) < 0) {
     fp = 0;
diff --git a/src/roff/troff/node.h b/src/roff/troff/node.h
index 15b654de..e1c1960f 100644
--- a/src/roff/troff/node.h
+++ b/src/roff/troff/node.h
@@ -626,6 +626,7 @@ class output_file {
   char make_g_plus_plus_shut_up;
 public:
   output_file();
+  bool is_dying = false;
   virtual ~output_file();
   virtual void trailer(vunits);
   virtual void flush() = 0;
